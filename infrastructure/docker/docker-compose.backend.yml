version: '3.8'

services:
  # ========================================
  # PostgreSQL Database (Primary Storage)
  # ========================================
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: arbitragex-postgres
    restart: always
    environment:
      POSTGRES_DB: arbitragex_supreme
      POSTGRES_USER: arbitragex_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgresql:/docker-entrypoint-initdb.d
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    networks:
      - arbitragex-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U arbitragex_user -d arbitragex_supreme"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '2.0'
        reservations:
          memory: 4G
          cpus: '1.0'

  # ========================================
  # Redis Cache (Multi-tier L2/L3)
  # ========================================
  redis:
    image: redis:7.2-alpine
    container_name: arbitragex-redis
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./database/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - arbitragex-network
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '1.0'
        reservations:
          memory: 2G
          cpus: '0.5'

  # ========================================
  # MEV Core Engine (Rust + Actix-Web)
  # ========================================
  searcher-rs:
    build:
      context: ./services/searcher-rs
      dockerfile: Dockerfile
    container_name: arbitragex-searcher
    restart: always
    environment:
      DATABASE_URL: postgres://arbitragex_user:${POSTGRES_PASSWORD}@postgres:5432/arbitragex_supreme
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      RPC_ETHEREUM: ${RPC_ETHEREUM}
      RPC_ARBITRUM: ${RPC_ARBITRUM}
      RPC_POLYGON: ${RPC_POLYGON}
      FLASHBOTS_RELAY_URL: ${FLASHBOTS_RELAY_URL}
      BLOXROUTE_AUTH: ${BLOXROUTE_AUTH}
      LOG_LEVEL: info
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - arbitragex-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # ========================================
  # Backend API (Node.js + TypeScript)
  # ========================================
  selector-api:
    build:
      context: ./services/selector-api
      dockerfile: Dockerfile
    container_name: arbitragex-api
    restart: always
    environment:
      NODE_ENV: production
      PORT: 8081
      DATABASE_URL: postgres://arbitragex_user:${POSTGRES_PASSWORD}@postgres:5432/arbitragex_supreme
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGINS: ${CORS_ORIGINS}
      RATE_LIMIT_MAX: 1000
      RATE_LIMIT_WINDOW: 900000
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      searcher-rs:
        condition: service_healthy
    networks:
      - arbitragex-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # ========================================
  # Prometheus Monitoring
  # ========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: arbitragex-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - arbitragex-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # Grafana Dashboards
  # ========================================
  grafana:
    image: grafana/grafana:latest
    container_name: arbitragex-grafana
    restart: always
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - arbitragex-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # Nginx Reverse Proxy
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: arbitragex-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - searcher-rs
      - selector-api
      - grafana
    networks:
      - arbitragex-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # Log Aggregator (rsyslog)
  # ========================================
  rsyslog:
    image: rsyslog/rsyslog_base_ubuntu:latest
    container_name: arbitragex-logs
    restart: always
    volumes:
      - ./logs:/var/log/arbitragex
      - ./infrastructure/monitoring/rsyslog.conf:/etc/rsyslog.conf
    networks:
      - arbitragex-network

# ========================================
# Network Configuration
# ========================================
networks:
  arbitragex-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ========================================
# Persistent Volumes
# ========================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/redis
  
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/prometheus
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/grafana