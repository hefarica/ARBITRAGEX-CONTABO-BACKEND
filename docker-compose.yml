# ArbitrageX Supreme V3.0 - Contabo Backend Orchestration
# Complete Docker Compose configuration for MEV arbitrage system
# Author: ArbitrageX Development Team
# Version: 3.0.0

version: '3.8'

networks:
  arbitragex-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  geth-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local

services:
  # ===========================================
  # BLOCKCHAIN INFRASTRUCTURE
  # ===========================================
  
  # Ethereum Node (Geth)
  geth:
    image: ethereum/client-go:v1.13.5
    container_name: arbitragex-geth
    restart: unless-stopped
    networks:
      arbitragex-net:
        ipv4_address: 172.20.1.10
    ports:
      - "8545:8545"  # HTTP RPC
      - "8546:8546"  # WebSocket RPC
      - "30303:30303" # P2P
    volumes:
      - geth-data:/root/.ethereum
      - ./configs/geth:/configs
    command: |
      --http
      --http.addr=0.0.0.0
      --http.port=8545
      --http.api=eth,net,web3,personal,txpool,debug
      --http.corsdomain=*
      --ws
      --ws.addr=0.0.0.0
      --ws.port=8546
      --ws.api=eth,net,web3,personal,txpool,debug
      --ws.origins=*
      --syncmode=snap
      --cache=2048
      --maxpeers=100
      --datadir=/root/.ethereum
      --keystore=/configs/keystore
    environment:
      - GETH_CACHE=2048
      - GETH_MAXPEERS=100
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "geth", "attach", "--exec", "eth.blockNumber"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Anvil Simulation Node (for testing)
  anvil:
    image: ghcr.io/foundry-rs/foundry:latest
    container_name: arbitragex-anvil
    restart: unless-stopped
    networks:
      arbitragex-net:
        ipv4_address: 172.20.1.11
    ports:
      - "8555:8555"
    command: |
      anvil 
      --host 0.0.0.0 
      --port 8555 
      --fork-url ${MAINNET_RPC_URL} 
      --fork-block-number ${FORK_BLOCK_NUMBER:-18500000}
      --accounts 20
      --balance 10000
      --gas-limit 30000000
      --code-size-limit 50000
    environment:
      - MAINNET_RPC_URL=${MAINNET_RPC_URL}
      - FORK_BLOCK_NUMBER=${FORK_BLOCK_NUMBER}

  # ===========================================
  # CORE ARBITRAGE SERVICES
  # ===========================================

  # Searcher Service (Rust - Main MEV Engine)
  searcher-rs:
    build:
      context: ./services/searcher-rs
      dockerfile: Dockerfile
    container_name: arbitragex-searcher
    restart: unless-stopped
    networks:
      arbitragex-net:
        ipv4_address: 172.20.2.10
    ports:
      - "3001:3001"
    volumes:
      - ./configs/searcher:/app/configs
      - ./logs:/app/logs
    environment:
      - RUST_LOG=info
      - GETH_RPC_URL=http://172.20.1.10:8545
      - GETH_WS_URL=ws://172.20.1.10:8546
      - ANVIL_RPC_URL=http://172.20.1.11:8555
      - POSTGRES_URL=postgresql://arbitragex:${POSTGRES_PASSWORD}@172.20.3.10:5432/arbitragex
      - REDIS_URL=redis://172.20.3.11:6379
      - SEARCHER_PORT=3001
      - PRIVATE_KEY=${SEARCHER_PRIVATE_KEY}
      - FLASHBOTS_BUNDLE_EXECUTOR=${FLASHBOTS_BUNDLE_EXECUTOR}
      - MAX_GAS_PRICE=${MAX_GAS_PRICE:-100}
      - MIN_PROFIT_THRESHOLD=${MIN_PROFIT_THRESHOLD:-0.01}
    depends_on:
      - geth
      - anvil
      - postgres
      - redis
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Selector API Service
  selector-api:
    build:
      context: ./services/selector-api
      dockerfile: Dockerfile
    container_name: arbitragex-selector
    restart: unless-stopped
    networks:
      arbitragex-net:
        ipv4_address: 172.20.2.11
    ports:
      - "3002:3002"
    volumes:
      - ./configs/selector:/app/configs
    environment:
      - NODE_ENV=production
      - PORT=3002
      - GETH_RPC_URL=http://172.20.1.10:8545
      - SEARCHER_API_URL=http://172.20.2.10:3001
      - POSTGRES_URL=postgresql://arbitragex:${POSTGRES_PASSWORD}@172.20.3.10:5432/arbitragex
      - JWT_SECRET=${JWT_SECRET}
      - API_RATE_LIMIT=${API_RATE_LIMIT:-1000}
    depends_on:
      - searcher-rs
      - postgres
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Simulation Controller
  sim-ctl:
    build:
      context: ./services/sim-ctl
      dockerfile: Dockerfile
    container_name: arbitragex-sim-ctl
    restart: unless-stopped
    networks:
      arbitragex-net:
        ipv4_address: 172.20.2.12
    ports:
      - "3003:3003"
    volumes:
      - ./configs/sim-ctl:/app/configs
    environment:
      - RUST_LOG=info
      - SIM_PORT=3003
      - ANVIL_RPC_URL=http://172.20.1.11:8555
      - GETH_RPC_URL=http://172.20.1.10:8545
      - SIMULATION_TIMEOUT=${SIMULATION_TIMEOUT:-5000}
      - MAX_CONCURRENT_SIMS=${MAX_CONCURRENT_SIMS:-10}
    depends_on:
      - anvil
      - geth
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Relays Client
  relays-client:
    build:
      context: ./services/relays-client
      dockerfile: Dockerfile
    container_name: arbitragex-relays
    restart: unless-stopped
    networks:
      arbitragex-net:
        ipv4_address: 172.20.2.13
    ports:
      - "3004:3004"
    environment:
      - RUST_LOG=info
      - RELAYS_PORT=3004
      - FLASHBOTS_RELAY_URL=${FLASHBOTS_RELAY_URL}
      - BLOXROUTE_RELAY_URL=${BLOXROUTE_RELAY_URL}
      - EDEN_RELAY_URL=${EDEN_RELAY_URL}
      - PRIVATE_KEY=${RELAYS_PRIVATE_KEY}
      - BUILDER_API_KEY=${BUILDER_API_KEY}
    volumes:
      - ./configs/relays:/app/configs
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Reconciliation Service
  recon:
    build:
      context: ./services/recon
      dockerfile: Dockerfile
    container_name: arbitragex-recon
    restart: unless-stopped
    networks:
      arbitragex-net:
        ipv4_address: 172.20.2.14
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - RECON_PORT=3005
      - POSTGRES_URL=postgresql://arbitragex:${POSTGRES_PASSWORD}@172.20.3.10:5432/arbitragex
      - GETH_RPC_URL=http://172.20.1.10:8545
      - RECONCILIATION_INTERVAL=${RECONCILIATION_INTERVAL:-300000}
    depends_on:
      - postgres
      - geth
    volumes:
      - ./configs/recon:/app/configs
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Cron Jobs Service
  cron:
    build:
      context: ./services/cron
      dockerfile: Dockerfile
    container_name: arbitragex-cron
    restart: unless-stopped
    networks:
      arbitragex-net:
        ipv4_address: 172.20.2.15
    environment:
      - NODE_ENV=production
      - POSTGRES_URL=postgresql://arbitragex:${POSTGRES_PASSWORD}@172.20.3.10:5432/arbitragex
      - REDIS_URL=redis://172.20.3.11:6379
      - GETH_RPC_URL=http://172.20.1.10:8545
    volumes:
      - ./configs/cron:/app/configs
      - ./scripts:/app/scripts
    depends_on:
      - postgres
      - redis
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # ===========================================
  # DATA LAYER
  # ===========================================

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: arbitragex-postgres
    restart: unless-stopped
    networks:
      arbitragex-net:
        ipv4_address: 172.20.3.10
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/migrations:/migrations
    environment:
      - POSTGRES_DB=arbitragex
      - POSTGRES_USER=arbitragex
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U arbitragex -d arbitragex"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: arbitragex-redis
    restart: unless-stopped
    networks:
      arbitragex-net:
        ipv4_address: 172.20.3.11
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./configs/redis/redis.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ===========================================
  # MONITORING & OBSERVABILITY
  # ===========================================

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: arbitragex-prometheus
    restart: unless-stopped
    networks:
      arbitragex-net:
        ipv4_address: 172.20.4.10
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://localhost:9090'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Grafana
  grafana:
    image: grafana/grafana:10.1.0
    container_name: arbitragex-grafana
    restart: unless-stopped
    networks:
      arbitragex-net:
        ipv4_address: 172.20.4.11
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_ANALYTICS_REPORTING_ENABLED=false
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # AlertManager
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: arbitragex-alertmanager
    restart: unless-stopped
    networks:
      arbitragex-net:
        ipv4_address: 172.20.4.12
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Loki (Log Aggregation)
  loki:
    image: grafana/loki:2.9.0
    container_name: arbitragex-loki
    restart: unless-stopped
    networks:
      arbitragex-net:
        ipv4_address: 172.20.4.13
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
      - ./monitoring/loki/loki.yml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Promtail (Log Shipper)
  promtail:
    image: grafana/promtail:2.9.0
    container_name: arbitragex-promtail
    restart: unless-stopped
    networks:
      arbitragex-net:
        ipv4_address: 172.20.4.14
    volumes:
      - ./logs:/var/log/arbitragex
      - ./monitoring/promtail/promtail.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Node Exporter
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: arbitragex-node-exporter
    restart: unless-stopped
    networks:
      arbitragex-net:
        ipv4_address: 172.20.4.15
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # ===========================================
  # REVERSE PROXY & LOAD BALANCER
  # ===========================================

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: arbitragex-nginx
    restart: unless-stopped
    networks:
      arbitragex-net:
        ipv4_address: 172.20.5.10
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./configs/nginx/sites-available:/etc/nginx/sites-available
      - ./ssl:/etc/ssl/certs
    depends_on:
      - searcher-rs
      - selector-api
      - sim-ctl
      - relays-client
      - recon
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3