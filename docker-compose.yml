# ArbitrageX Supreme V3.0 - Docker Compose Infrastructure
# Infraestructura completa: PostgreSQL, Redis, MEV Engine, API Backend, Monitoring

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: arbitragex-postgres
    environment:
      POSTGRES_DB: arbitragex_production
      POSTGRES_USER: ${POSTGRES_USER:-arbitragex}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_2025}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init-scripts:/docker-entrypoint-initdb.d:ro
      - ./infrastructure/postgres/config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-arbitragex} -d arbitragex_production"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - arbitragex-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: arbitragex-redis
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - arbitragex-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M

  # MEV Engine (Rust)
  mev-engine:
    build:
      context: ./apps/mev-engine
      dockerfile: Dockerfile
    container_name: arbitragex-mev-engine
    environment:
      RUST_LOG: info
      DATABASE_URL: postgresql://${POSTGRES_USER:-arbitragex}:${POSTGRES_PASSWORD:-secure_password_2025}@postgres:5432/arbitragex_production
      REDIS_URL: redis://redis:6379
      ETHEREUM_RPC_URL: ${ETHEREUM_RPC_URL}
      POLYGON_RPC_URL: ${POLYGON_RPC_URL}
      BSC_RPC_URL: ${BSC_RPC_URL}
      ARBITRUM_RPC_URL: ${ARBITRUM_RPC_URL}
      OPTIMISM_RPC_URL: ${OPTIMISM_RPC_URL}
      AVALANCHE_RPC_URL: ${AVALANCHE_RPC_URL}
      FANTOM_RPC_URL: ${FANTOM_RPC_URL}
      BASE_RPC_URL: ${BASE_RPC_URL}
      SOLANA_RPC_URL: ${SOLANA_RPC_URL}
      NEAR_RPC_URL: ${NEAR_RPC_URL}
      CARDANO_RPC_URL: ${CARDANO_RPC_URL}
      COSMOS_RPC_URL: ${COSMOS_RPC_URL}
      PRIVATE_KEY: ${PRIVATE_KEY}
      SIMULATION_MODE: ${SIMULATION_MODE:-true}
    ports:
      - "8080:8080"  # MEV Engine API
      - "9090:9090"  # Metrics endpoint
    volumes:
      - ./apps/mev-engine/config:/app/config:ro
      - mev_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - arbitragex-network
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G

  # API Backend (Node.js)
  api-backend:
    build:
      context: ./apps/api-backend
      dockerfile: Dockerfile
    container_name: arbitragex-api-backend
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://${POSTGRES_USER:-arbitragex}:${POSTGRES_PASSWORD:-secure_password_2025}@postgres:5432/arbitragex_production
      REDIS_URL: redis://redis:6379
      MEV_ENGINE_URL: http://mev-engine:8080
      JWT_SECRET: ${JWT_SECRET:-super_secure_jwt_secret_2025}
      RATE_LIMIT_WINDOW: 900000  # 15 minutes
      RATE_LIMIT_MAX: 1000       # requests per window
    ports:
      - "3001:3000"  # API Backend
    volumes:
      - ./apps/api-backend/config:/app/config:ro
      - api_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mev-engine:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - arbitragex-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: arbitragex-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9091:9090"  # Prometheus UI
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    depends_on:
      - mev-engine
      - api-backend
    restart: unless-stopped
    networks:
      - arbitragex-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.2.3
    container_name: arbitragex-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-arbitragex2025}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    ports:
      - "3002:3000"  # Grafana UI
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - arbitragex-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # AlertManager
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: arbitragex-alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"  # AlertManager UI
    volumes:
      - ./infrastructure/monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - arbitragex-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Node Exporter (System Metrics)
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: arbitragex-node-exporter
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    volumes:
      - /:/host:ro,rslave
    restart: unless-stopped
    networks:
      - arbitragex-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M

  # NGINX Reverse Proxy & Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: arbitragex-nginx
    ports:
      - "80:80"     # HTTP
      - "443:443"   # HTTPS
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api-backend
      - grafana
      - prometheus
    restart: unless-stopped
    networks:
      - arbitragex-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none  
      o: bind
      device: ./data/redis
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana
  alertmanager_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/alertmanager
  mev_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/mev-engine
  api_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/api-backend
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/nginx

networks:
  arbitragex-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16