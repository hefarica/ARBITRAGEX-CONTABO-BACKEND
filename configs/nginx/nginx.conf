# ArbitrageX Supreme V3.0 - Nginx Configuration
# High-performance reverse proxy for MEV arbitrage system

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Optimize for high-frequency connections
worker_rlimit_nofile 65536;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

http {
    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format for structured logs
    log_format json_combined escape=json
    '{'
        '"time_local":"$time_local",'
        '"remote_addr":"$remote_addr",'
        '"remote_user":"$remote_user",'
        '"request":"$request",'
        '"status":"$status",'
        '"body_bytes_sent":"$body_bytes_sent",'
        '"request_time":"$request_time",'
        '"http_referrer":"$http_referer",'
        '"http_user_agent":"$http_user_agent",'
        '"upstream_addr":"$upstream_addr",'
        '"upstream_response_time":"$upstream_response_time",'
        '"upstream_status":"$upstream_status"'
    '}';

    access_log /var/log/nginx/access.log json_combined;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;

    # Buffer optimizations for high-frequency requests
    client_body_buffer_size 128k;
    client_max_body_size 10m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting for API endpoints
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=health_limit:1m rate=10r/s;

    # Upstream definitions
    upstream searcher_backend {
        least_conn;
        server searcher-rs:3001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream selector_backend {
        least_conn;
        server selector-api:3002 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream sim_backend {
        least_conn;
        server sim-ctl:3003 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream relays_backend {
        least_conn;
        server relays-client:3004 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream recon_backend {
        least_conn;
        server recon:3005 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream monitoring_backend {
        server grafana:3000;
        keepalive 16;
    }

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Main server configuration
    server {
        listen 80;
        listen [::]:80;
        server_name localhost _;

        # Redirect HTTP to HTTPS in production
        # return 301 https://$server_name$request_uri;

        # Health check endpoint (no rate limiting)
        location /health {
            limit_req zone=health_limit burst=20 nodelay;
            
            access_log off;
            return 200 '{"status":"healthy","service":"nginx","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        # API routes with rate limiting
        location /api/ {
            limit_req zone=api_limit burst=200 nodelay;
            
            # Determine backend based on path
            set $backend "";
            if ($uri ~ "^/api/searcher") {
                set $backend "searcher_backend";
            }
            if ($uri ~ "^/api/selector") {
                set $backend "selector_backend";
            }
            if ($uri ~ "^/api/simulation") {
                set $backend "sim_backend";
            }
            if ($uri ~ "^/api/relays") {
                set $backend "relays_backend";
            }
            if ($uri ~ "^/api/reconciliation") {
                set $backend "recon_backend";
            }

            # Default to searcher backend
            if ($backend = "") {
                set $backend "searcher_backend";
            }

            # Proxy configuration
            proxy_pass http://$backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts for high-frequency trading
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # Buffer configuration
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }

        # Monitoring and metrics (restricted access)
        location /monitoring/ {
            # Optional: restrict to internal networks
            # allow 10.0.0.0/8;
            # allow 172.16.0.0/12;
            # allow 192.168.0.0/16;
            # deny all;

            rewrite ^/monitoring/(.*)$ /$1 break;
            proxy_pass http://monitoring_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # Prometheus metrics endpoint
        location /metrics {
            # Restrict to monitoring systems
            allow 172.20.0.0/16;
            deny all;
            
            try_files $uri @prometheus_metrics;
        }

        location @prometheus_metrics {
            proxy_pass http://prometheus:9090/metrics;
            proxy_set_header Host $host;
        }

        # Static files (if any)
        location /static/ {
            expires 1d;
            add_header Cache-Control "public, immutable";
        }

        # Default location
        location / {
            return 200 '{"message":"ArbitrageX Supreme V3.0 API Gateway","version":"3.0.0","status":"active"}';
            add_header Content-Type application/json;
        }
    }

    # HTTPS server configuration (for production)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name localhost _;

        # SSL configuration
        ssl_certificate /etc/ssl/certs/arbitragex.crt;
        ssl_certificate_key /etc/ssl/certs/arbitragex.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # HSTS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Include same location blocks as HTTP server
        include /etc/nginx/sites-available/arbitragex-locations.conf;
    }
}